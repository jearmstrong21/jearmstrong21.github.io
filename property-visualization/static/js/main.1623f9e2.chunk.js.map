{"version":3,"sources":["App.js","index.js"],"names":["App","canvasRef","React","createRef","regl","REGL","this","current","points","delaunator","Delaunator","simplex","SimplexNoise","calculateBuffers","position","Array","triangles","length","fill","map","_","index","flatMap","triangle","p","normal","v","p0","p1","p2","a1","a2","a3","b1","b2","b3","s1","s2","s3","mag","Math","sqrt","calculateNormal","position0","position1","position2","elements","buffers","buffer","addPoint","x","z","height","noise2D","calculateHeight","push","coords","newBuffers","data","draw","frag","vert","attributes","uniforms","projection","viewportWidth","viewportHeight","mat4","perspective","PI","view","time","lookAt","cos","sin","doWireframe","prop","doLighting","doNormals","primitive","stats","Stats","showPanel","document","body","appendChild","dom","frame","begin","width","window","devicePixelRatio","style","innerWidth","innerHeight","clear","color","depth","EXIT_NOW","i","random","end","ref","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1623f9e2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport REGL from \"regl\";\nimport mat4 from \"gl-mat4\"\nimport SimplexNoise from \"simplex-noise\"\nimport Delaunator from \"delaunator\";\nimport Stats from \"stats.js\"\nimport DatGUI from \"dat.gui\"\n\nclass App extends React.Component {\n\n    canvasRef = React.createRef();\n\n    componentDidMount() {\n\n        //TODO add new points from simplex over time (one per frame?) to test\n        // Create heightAt(x, z) function\n        // Start with no points and update buffers with REGL\n        // delaunay.update()\n        // Updates the triangulation if you modified delaunay.coords values in place, avoiding expensive memory allocations. Useful for iterative relaxation algorithms such as Lloyd's.\n        // https://github.com/mapbox/delaunator#delaunayupdate\n\n        let flatten = false;\n\n        let regl = REGL(this.canvasRef.current);\n        // let gui = new DatGUI.GUI();\n\n        let calculateNormal = (p0, p1, p2) => {\n            let a1 = p0[0] - p1[0];\n            let a2 = p0[1] - p1[1];\n            let a3 = p0[2] - p1[2];\n            let b1 = p0[0] - p2[0];\n            let b2 = p0[1] - p2[1];\n            let b3 = p0[2] - p2[2];\n            let s1 = a2 * b3 - a3 * b2;\n            let s2 = a3 * b1 - a1 * b3;\n            let s3 = a1 * b2 - a2 * b1;\n            let mag = Math.sqrt(s1 * s1 + s2 * s2 + s3 * s3);\n            s1 /= mag;\n            s2 /= mag;\n            s3 /= mag;\n            if (s2 < 0) {\n                s1 *= -1;\n                s2 *= -1;\n                s3 *= -1;\n            }\n            return [s1, s2, s3];\n        };\n\n        let points = [];\n        let delaunator = new Delaunator([]);\n        let simplex = new SimplexNoise();\n\n        let calculateHeight = (x, z) => 10.0 * simplex.noise2D(0.025 * x, 0.025 * z);\n\n        let calculateBuffers = () => {\n            let triangles = new Array(delaunator.triangles.length / 3).fill(0).map((_, index) => [delaunator.triangles[index * 3], delaunator.triangles[index * 3 + 1], delaunator.triangles[index * 3 + 2]])\n\n            let position = triangles.flatMap(triangle => {\n                let p = [points[triangle[0]], points[triangle[1]], points[triangle[2]]];\n                if (flatten) p = p.map(v => {\n                    v[1] = 0;\n                    return v;\n                });\n                return p;\n            });\n            let normal = new Array(position.length / 3).fill(0).map((_, index) => {\n                let p0 = position[index * 3];\n                let p1 = position[index * 3 + 1];\n                let p2 = position[index * 3 + 2];\n                let v = calculateNormal(p0, p1, p2);\n                return [v, v, v];\n            });\n            let position0 = new Array(position.length / 3).fill(0).map((_, index) => [position[index * 3], position[index * 3], position[index * 3]]);\n            let position1 = new Array(position.length / 3).fill(0).map((_, index) => [position[index * 3 + 1], position[index * 3 + 1], position[index * 3 + 1]]);\n            let position2 = new Array(position.length / 3).fill(0).map((_, index) => [position[index * 3 + 2], position[index * 3 + 2], position[index * 3 + 2]]);\n\n            let elements = position.map((_, index) => index);\n\n            return {\n                position: position,\n                normal: normal,\n                position0: position0,\n                position1: position1,\n                position2: position2,\n                elements: elements\n            };\n        };\n\n        let buffers = {\n            position: regl.buffer([]),\n            normal: regl.buffer([]),\n            position0: regl.buffer([]),\n            position1: regl.buffer([]),\n            position2: regl.buffer([]),\n            elements: regl.elements([])\n        };\n\n        let addPoint = (x, z) => {\n            let height = calculateHeight(x, z);\n            points.push([x, height, z]);\n            delaunator.coords.push(x);\n            delaunator.coords.push(z);\n            delaunator = new Delaunator(delaunator.coords);\n            let newBuffers = calculateBuffers();\n            buffers.position({data: newBuffers.position});\n            buffers.normal({data: newBuffers.normal});\n            buffers.position0({data: newBuffers.position0});\n            buffers.position1({data: newBuffers.position1});\n            buffers.position2({data: newBuffers.position2});\n            buffers.elements({data: newBuffers.elements});\n        };\n\n        addPoint(-50, -50);\n        addPoint(-50, 50);\n        addPoint(50, -50);\n        addPoint(50, 50);\n\n        const draw = regl({\n            frag: `\n            precision mediump float;\n            \n            varying vec3 inPosition;\n            varying vec3 inNormal;\n            varying vec3 inPosition0;\n            varying vec3 inPosition1;\n            varying vec3 inPosition2;\n            \n            uniform bool doWireframe;\n            uniform bool doLighting;\n            uniform bool doNormals;\n            \n            float area(vec3 a, vec3 b, vec3 c){\n                return 0.5 * length(cross(b - a, c - a));\n            }\n            \n            // https://math.stackexchange.com/a/1905794/553817\n            // A = point to test\n            // B, C = two points on line\n            float lineDist(vec3 A, vec3 B, vec3 C) {\n                vec3 d = normalize(C - B);\n                vec3 v = A - B;\n                float t = dot(v, d);\n                vec3 P = B + t * d;\n                return length(P - A);\n            }\n            \n            void main(){\n                vec3 normal = normalize(inNormal);\n                gl_FragColor.rgb = vec3(1);\n                if(doNormals) {\n                    gl_FragColor.rgb = 0.5 + 0.5 * normal;\n                }\n                if(doLighting) {\n                    vec3 L1 = vec3(30, 20, 0);\n                    vec3 L2 = vec3(-5, 60, 25);\n                    float I1 = dot(normal, normalize(L1 - inPosition));\n                    float I2 = dot(normal, normalize(L2 - inPosition));\n                    gl_FragColor.rgb *= 0.5 * I1 + 0.5 * I2;\n                }\n                \n                float totalArea = area(inPosition0, inPosition1, inPosition2);\n                vec3 coords = vec3(area(inPosition0, inPosition1, inPosition), area(inPosition1, inPosition2, inPosition), area(inPosition2, inPosition0, inPosition)) / totalArea;\n                if(doWireframe) {\n                    vec3 lineDistances = vec3(lineDist(inPosition, inPosition0, inPosition1), lineDist(inPosition, inPosition1, inPosition2), lineDist(inPosition, inPosition2, inPosition0));\n                    float minDistance = min(lineDistances.x, min(lineDistances.y, lineDistances.z));\n                    gl_FragColor.rgb = mix(vec3(0), gl_FragColor.rgb, vec3(smoothstep(0., 1., 20.0*minDistance)));\n                }\n                gl_FragColor.w = 1.0;\n            }\n            `,\n            vert: `\n            precision mediump float;\n            attribute vec3 position;\n            attribute vec3 normal;\n            attribute vec3 position0;\n            attribute vec3 position1;\n            attribute vec3 position2;\n            varying vec3 inPosition;\n            varying vec3 inNormal;\n            varying vec3 inPosition0;\n            varying vec3 inPosition1;\n            varying vec3 inPosition2;\n            uniform mat4 projection, view;\n            void main(){\n                gl_Position=projection*view*vec4(position,1);\n                inPosition=position;\n                inNormal=normal;\n                inPosition0=position0;\n                inPosition1=position1;\n                inPosition2=position2;\n            }\n            `,\n            attributes: {\n                position: buffers.position,\n                normal: buffers.normal,\n                position0: buffers.position0,\n                position1: buffers.position1,\n                position2: buffers.position2\n            },\n            elements: buffers.elements,\n            uniforms: {\n                projection: ({viewportWidth, viewportHeight}) => {\n                    return mat4.perspective([],\n                        Math.PI / 4,\n                        viewportWidth / viewportHeight,\n                        0.01,\n                        1000\n                    );\n                },\n                view: ({time}) => {\n                    return mat4.lookAt([],\n                        [40 * Math.cos(time * 0.1), 30, 40 * Math.sin(time * 0.1)],\n                        [0, 0, 0],\n                        [0, 1, 0]\n                    );\n                },\n                doWireframe: regl.prop(\"doWireframe\"),\n                doLighting: regl.prop(\"doLighting\"),\n                doNormals: regl.prop(\"doNormals\")\n            },\n            primitive: 'triangles'\n        });\n\n        let stats = new Stats();\n        stats.showPanel(0);\n        document.body.appendChild(stats.dom);\n\n        regl.frame(({}) => {\n            stats.begin();\n            this.canvasRef.current.width = window.devicePixelRatio * (this.canvasRef.current.style.width = window.innerWidth);\n            this.canvasRef.current.height = window.devicePixelRatio * (this.canvasRef.current.style.height = window.innerHeight);\n            regl.clear({color: [0, 0, 0, 1], depth: 1});\n\n            if(!window.EXIT_NOW){\n                for(let i=0;i<1;i++)addPoint(Math.random() * 100 - 50, Math.random() * 100 - 50);\n            }\n\n            draw({\n                doWireframe: !!window.doWireframe,\n                doLighting: !!window.doLighting,\n                doNormals: !!window.doNormals\n            });\n            stats.end();\n        });\n        window.doWireframe = true;\n        window.doLighting = true;\n        window.doNormals = true;\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref={this.canvasRef}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}